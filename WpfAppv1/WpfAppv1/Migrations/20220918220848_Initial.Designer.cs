// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WpfAppv1.Models;

#nullable disable

namespace WpfAppv1.Migrations
{
    [DbContext(typeof(possectorContext))]
    [Migration("20220918220848_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RuleTaxis", b =>
                {
                    b.Property<Guid>("RuleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Rule_Id");

                    b.Property<Guid>("TaxId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Tax_Id");

                    b.HasKey("RuleId", "TaxId")
                        .HasName("PK_dbo.RuleTaxes");

                    b.HasIndex(new[] { "RuleId" }, "IX_Rule_Id");

                    b.HasIndex(new[] { "TaxId" }, "IX_Tax_Id");

                    b.ToTable("RuleTaxes", (string)null);
                });

            modelBuilder.Entity("WpfAppv1.Models.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArticleNumber")
                        .HasColumnType("int");

                    b.Property<string>("BarCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("FreeModifiers")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ReturnFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SubCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SubCategory_Id");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("WpfAppv1.Models.ArticleGood", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Article_Id");

                    b.Property<Guid?>("GoodId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Good_Id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(14,4)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ArticleId" }, "IX_Article_Id");

                    b.HasIndex(new[] { "ArticleId", "GoodId" }, "IX_FirstDpuReportOptimization");

                    b.HasIndex(new[] { "GoodId" }, "IX_Good_Id");

                    b.HasIndex(new[] { "GoodId", "ArticleId" }, "IX_SecondDpuReportOptimization");

                    b.ToTable("ArticleGoods");
                });

            modelBuilder.Entity("WpfAppv1.Models.ArticleModifier", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Article_Id");

                    b.Property<Guid?>("ModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Modifier_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ArticleId" }, "IX_Article_Id")
                        .HasDatabaseName("IX_Article_Id1");

                    b.HasIndex(new[] { "ModifierId" }, "IX_Modifier_Id");

                    b.ToTable("ArticleModifiers");
                });

            modelBuilder.Entity("WpfAppv1.Models.ArticlesYedek", b =>
                {
                    b.Property<int>("ArticleNumber")
                        .HasColumnType("int");

                    b.Property<string>("BarCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("FreeModifiers")
                        .HasColumnType("int");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Image")
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ReturnFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SubCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SubCategory_Id");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Articles_yedek", (string)null);
                });

            modelBuilder.Entity("WpfAppv1.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ExtraPrinter1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraPrinter2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Printer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StorageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Storage_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StorageId" }, "IX_Storage_Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WpfAppv1.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityAndPostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("WpfAppv1.Models.Einvoice", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsStationVat")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderFormFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderFormFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderFormReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentDue")
                        .HasColumnType("int");

                    b.Property<string>("PaymentIdModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentIdReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegisterId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("SenderBankAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int")
                        .HasColumnName("Status_Code");

                    b.Property<string>("StatusNote")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status_Note");

                    b.Property<DateTime>("StatusTimestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("Status_Timestamp");

                    b.Property<string>("WaiterName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.HasKey("InvoiceId")
                        .HasName("PK_dbo.EInvoices");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("InvoiceId"), false);

                    b.HasIndex(new[] { "StatusCode", "RegisterId", "InvoiceId" }, "CLIX_FirstQueryOptimization");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "StatusCode", "RegisterId", "InvoiceId" }, "CLIX_FirstQueryOptimization"));

                    b.HasIndex(new[] { "InvoiceId" }, "IX_InvoiceId");

                    b.HasIndex(new[] { "OrderFormFileId" }, "IX_OrderFormFileId");

                    b.HasIndex(new[] { "ReceiverId" }, "IX_ReceiverId");

                    b.HasIndex(new[] { "SenderId" }, "IX_SenderId");

                    b.ToTable("EInvoices", (string)null);
                });

            modelBuilder.Entity("WpfAppv1.Models.EinvoiceOrderFormFile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("GzippedContents")
                        .HasColumnType("image")
                        .HasColumnName("GZippedContents");

                    b.HasKey("Id");

                    b.ToTable("EInvoiceOrderFormFiles", (string)null);
                });

            modelBuilder.Entity("WpfAppv1.Models.EinvoiceParty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessBranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("EndpointId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndpointIdSchemeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyIdentificationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalAddressCityName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PostalAddress_CityName");

                    b.Property<string>("PostalAddressPostalCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PostalAddress_PostalCode");

                    b.Property<string>("PostalAddressStreetName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PostalAddress_StreetName");

                    b.Property<string>("RegistrationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.EInvoiceParties");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex(new[] { "CompanyId" }, "CLIX_FirstQueryOptimization")
                        .HasDatabaseName("CLIX_FirstQueryOptimization1");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "CompanyId" }, "CLIX_FirstQueryOptimization"));

                    b.ToTable("EInvoiceParties", (string)null);
                });

            modelBuilder.Entity("WpfAppv1.Models.Good", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("LatestPrice")
                        .HasColumnType("decimal(14,4)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Refuse")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Unit_Id");

                    b.Property<decimal?>("Volumen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,4)")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UnitId" }, "IX_Unit_Id");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("WpfAppv1.Models.InventoryDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("SourceInvoiceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SourceInvoice_Id");

                    b.Property<Guid?>("StorageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Storage_Id");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Supplier_Id");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id", "Type" }, "IX_FourthStockOptimization");

                    b.HasIndex(new[] { "SourceInvoiceId" }, "IX_SourceInvoice_Id");

                    b.HasIndex(new[] { "StorageId" }, "IX_Storage_Id")
                        .HasDatabaseName("IX_Storage_Id1");

                    b.HasIndex(new[] { "SupplierId" }, "IX_Supplier_Id");

                    b.ToTable("InventoryDocuments");
                });

            modelBuilder.Entity("WpfAppv1.Models.InventoryItemBasis", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("CurrentQuantity")
                        .HasColumnType("decimal(14,4)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("GoodId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Good_Id");

                    b.Property<Guid?>("InventoryDocumentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("InventoryDocument_Id");

                    b.Property<Guid?>("InvoiceItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("InvoiceItem_Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("NormativQuantity")
                        .HasColumnType("decimal(14,4)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(14,4)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(14,4)");

                    b.Property<decimal?>("Refuse")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("StorageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Storage_Id");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(14,3)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex(new[] { "Discriminator", "StorageId" }, "IX_FirstStockOptimization");

                    b.HasIndex(new[] { "GoodId" }, "IX_Good_Id")
                        .HasDatabaseName("IX_Good_Id1");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "GoodId" }, "IX_Good_Id"));

                    b.HasIndex(new[] { "InventoryDocumentId" }, "IX_InventoryDocument_Id");

                    b.HasIndex(new[] { "InvoiceItemId" }, "IX_InvoiceItem_Id");

                    b.HasIndex(new[] { "InventoryDocumentId", "Discriminator", "StorageId", "Created" }, "IX_SecondStockOptimization")
                        .HasFilter("([Discriminator]='InventoryDocumentItem')");

                    b.HasIndex(new[] { "StorageId" }, "IX_Storage_Id")
                        .HasDatabaseName("IX_Storage_Id2");

                    b.HasIndex(new[] { "InventoryDocumentId", "Discriminator", "StorageId" }, "IX_ThirdStockOptimization")
                        .HasFilter("([Discriminator]='InventoryDocumentItem' AND [Quantity]<(0))");

                    b.ToTable("InventoryItemBases");
                });

            modelBuilder.Entity("WpfAppv1.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CashPayed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Customer_Id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<decimal>("DiscountAmmount")
                        .HasColumnType("decimal(16,2)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(16,2)");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FiscalReceiptNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNumberFormatted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProformaInvoice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStorned")
                        .HasColumnType("bit");

                    b.Property<string>("Jir")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("JIR");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderByWaiterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OrderByWaiter_Id");

                    b.Property<DateTime>("OrderCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("PaymentTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PaymentType_Id");

                    b.Property<decimal>("ReturnChange")
                        .HasColumnType("decimal(14,4)");

                    b.Property<int>("ServiceChargePercentage")
                        .HasColumnType("int");

                    b.Property<Guid?>("StationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Station_Id");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Table_Id");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(14,4)");

                    b.Property<Guid?>("WaiterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Waiter_Id");

                    b.Property<DateTime>("WorkingDay")
                        .HasColumnType("datetime");

                    b.Property<string>("Zki")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ZKI");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IsOrder", "IsDeleted" }, "IDX_Opt1");

                    b.HasIndex(new[] { "DateCreated" }, "IDX_Opt2");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Customer_Id");

                    b.HasIndex(new[] { "InvoiceNumber", "WorkingDay" }, "IX_NextInvoiceNumberOptimization")
                        .HasFilter("([IsProformaInvoice]=(0) AND [IsOrder]=(0))");

                    b.HasIndex(new[] { "InvoiceNumber", "WorkingDay" }, "IX_NextProformaInvoiceNumberOptimization")
                        .HasFilter("([IsProformaInvoice]=(1))");

                    b.HasIndex(new[] { "OrderByWaiterId" }, "IX_OrderByWaiter_Id");

                    b.HasIndex(new[] { "PaymentTypeId" }, "IX_PaymentType_Id");

                    b.HasIndex(new[] { "StationId" }, "IX_Station_Id");

                    b.HasIndex(new[] { "TableId" }, "IX_Table_Id");

                    b.HasIndex(new[] { "WaiterId" }, "IX_Waiter_Id");

                    b.HasIndex(new[] { "IsDeleted", "DateCreated" }, "idx_DeleteDate");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("WpfAppv1.Models.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Article_Id");

                    b.Property<string>("ArticleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(14,8)");

                    b.Property<decimal>("BasePriceWithoutDiscount")
                        .HasColumnType("decimal(14,8)");

                    b.Property<decimal>("DiscountAmmount")
                        .HasColumnType("decimal(16,2)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(16,2)");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Invoice_Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(14,4)");

                    b.Property<decimal>("PriceWithoutDiscount")
                        .HasColumnType("decimal(14,4)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(14,4)");

                    b.Property<decimal>("ReturnFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxAmmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TaxTag")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("TaxVal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(14,4)");

                    b.Property<decimal>("TotalTaxes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWithoutDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWithoutTax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ArticleId" }, "IX_Article_Id")
                        .HasDatabaseName("IX_Article_Id2");

                    b.HasIndex(new[] { "InvoiceId" }, "IX_Invoice_Id");

                    b.HasIndex(new[] { "IsDeleted", "TaxTag" }, "IdxTaxCalc");

                    b.HasIndex(new[] { "IsDeleted", "TaxTag" }, "IdxTaxTags");

                    b.HasIndex(new[] { "IsDeleted", "TaxTag" }, "IdxTaxTags1");

                    b.HasIndex(new[] { "IsDeleted", "TaxTag" }, "IdxTaxTags2");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("WpfAppv1.Models.InvoiceItemModifier", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InvoiceItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("InvoiceItem_Id");

                    b.Property<Guid?>("ModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Modifier_Id");

                    b.Property<decimal>("PriceWithoutDiscount")
                        .HasColumnType("decimal(14,4)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "InvoiceItemId" }, "IX_InvoiceItem_Id")
                        .HasDatabaseName("IX_InvoiceItem_Id1");

                    b.HasIndex(new[] { "ModifierId" }, "IX_Modifier_Id")
                        .HasDatabaseName("IX_Modifier_Id1");

                    b.ToTable("InvoiceItemModifiers");
                });

            modelBuilder.Entity("WpfAppv1.Models.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedYear")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(datepart(year,[Created]))", true);

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedYear" }, "IX_CreatedYear");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("WpfAppv1.Models.MeasureUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeasureUnits");
                });

            modelBuilder.Entity("WpfAppv1.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("FromId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("From_Id");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ToId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("To_Id");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FromId" }, "IX_From_Id");

                    b.HasIndex(new[] { "ToId" }, "IX_To_Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("WpfAppv1.Models.NewPrice", b =>
                {
                    b.Property<string>("Ad")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("Fiyat")
                        .HasColumnType("float");

                    b.Property<string>("Tttt")
                        .HasColumnType("ntext")
                        .HasColumnName("TTTT");

                    b.ToTable("NewPrices");
                });

            modelBuilder.Entity("WpfAppv1.Models.Novi", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArticleNumber")
                        .HasColumnType("int");

                    b.Property<string>("BarCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("FreeModifiers")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ReturnFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SubCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SubCategory_Id");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Novi", (string)null);
                });

            modelBuilder.Entity("WpfAppv1.Models.OrdersPerDate", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("NumberOfOrders")
                        .HasColumnType("int");

                    b.HasKey("Date")
                        .HasName("PK_dbo.OrdersPerDate");

                    b.ToTable("OrdersPerDate", (string)null);
                });

            modelBuilder.Entity("WpfAppv1.Models.PaymentType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("WpfAppv1.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Customer_Id");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Customer_Id")
                        .HasDatabaseName("IX_Customer_Id1");

                    b.ToTable("People");
                });

            modelBuilder.Entity("WpfAppv1.Models.Primka", b =>
                {
                    b.Property<string>("Barcode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("BARCODE");

                    b.Property<double?>("Cenakune")
                        .HasColumnType("float");

                    b.Property<string>("Gender")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("GENDER");

                    b.Property<string>("Item")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ITEM");

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("naziv");

                    b.Property<double?>("SoPrice")
                        .HasColumnType("float")
                        .HasColumnName("SO_PRICE");

                    b.ToTable("Primka", (string)null);
                });

            modelBuilder.Entity("WpfAppv1.Models.Print", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Prints");
                });

            modelBuilder.Entity("WpfAppv1.Models.PrintJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Created" }, "IX_Created");

                    b.ToTable("PrintJobs");
                });

            modelBuilder.Entity("WpfAppv1.Models.Rule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExecuted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("WpfAppv1.Models.RuleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Article_Id");

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("RuleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Rule_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ArticleId" }, "IX_Article_Id")
                        .HasDatabaseName("IX_Article_Id3");

                    b.HasIndex(new[] { "RuleId" }, "IX_Rule_Id")
                        .HasDatabaseName("IX_Rule_Id1");

                    b.ToTable("RuleItems");
                });

            modelBuilder.Entity("WpfAppv1.Models.Sector", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("WpfAppv1.Models.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalCurrencyMark")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('EUR')");

                    b.Property<decimal>("AdditionalCurrencyRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(14,4)")
                        .HasDefaultValueSql("((7))");

                    b.Property<string>("Addres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowCancelOrderItems")
                        .HasColumnType("bit");

                    b.Property<bool>("AreInvoiceItemsGrouped")
                        .HasColumnType("bit");

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityPostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DisplayAutomaticallyModifiers")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForbidAccessToTakenTables")
                        .HasColumnType("bit");

                    b.Property<bool>("ForbidEndShiftIfThereAreAnyOrders")
                        .HasColumnType("bit");

                    b.Property<string>("IdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceFooter1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceFooter2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceFooter3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceFooter4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceMark")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('R1')");

                    b.Property<bool>("IsEinvoiceEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("IsEInvoiceEnabled");

                    b.Property<bool>("IsFiscal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvoiceDailyCounter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRetail")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTableService")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaxAddedOnPrice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVat")
                        .HasColumnType("bit")
                        .HasColumnName("IsVAT");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationMark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LogOffUserAfterInvoice")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfIssueOfInvoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PrintAfterDeleteArticles")
                        .HasColumnType("bit");

                    b.Property<bool>("PrintOnA4")
                        .HasColumnType("bit");

                    b.Property<bool>("PrintOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("PrintPreview")
                        .HasColumnType("bit");

                    b.Property<bool>("PrintReceiptAfterOrder")
                        .HasColumnType("bit");

                    b.Property<string>("Reserved01")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceChargePercentage")
                        .HasColumnType("int");

                    b.Property<bool>("ShowGrossInsteadOfNettPrice")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShowTaxesOnInvoice")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("ShowWaiterNameOnA4invoice")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("ShowWaiterNameOnA4Invoice")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UseAdditionalCurrency")
                        .HasColumnType("bit");

                    b.Property<bool>("UseChangeCalculator")
                        .HasColumnType("bit");

                    b.Property<bool>("UsePrintAllOrders")
                        .HasColumnType("bit");

                    b.Property<bool>("UseProformaInvoice")
                        .HasColumnType("bit");

                    b.Property<DateTime>("WorkDayStartAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("WpfAppv1.Models.StationArticle", b =>
                {
                    b.Property<Guid>("StationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Station_Id");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Article_Id");

                    b.HasKey("StationId", "ArticleId");

                    b.HasIndex(new[] { "ArticleId" }, "IX_Article_Id")
                        .HasDatabaseName("IX_Article_Id4");

                    b.HasIndex(new[] { "StationId" }, "IX_Station_Id")
                        .HasDatabaseName("IX_Station_Id1");

                    b.ToTable("StationArticles");
                });

            modelBuilder.Entity("WpfAppv1.Models.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("WpfAppv1.Models.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Category_Id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ExtraPrinter1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraPrinter2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Printer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StorageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Storage_Id");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Category_Id");

                    b.HasIndex(new[] { "StorageId" }, "IX_Storage_Id")
                        .HasDatabaseName("IX_Storage_Id3");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("WpfAppv1.Models.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("WpfAppv1.Models.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<double>("Rotation")
                        .HasColumnType("float");

                    b.Property<Guid?>("SectorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Sector_Id");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid?>("WaiterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Waiter_Id");

                    b.Property<double>("X")
                        .HasColumnType("float");

                    b.Property<double>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SectorId" }, "IX_Sector_Id");

                    b.HasIndex(new[] { "WaiterId" }, "IX_Waiter_Id")
                        .HasDatabaseName("IX_Waiter_Id1");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("WpfAppv1.Models.TaxArticle", b =>
                {
                    b.Property<Guid>("TaxId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Tax_Id");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Article_Id");

                    b.HasKey("TaxId", "ArticleId");

                    b.HasIndex(new[] { "ArticleId" }, "IX_Article_Id")
                        .HasDatabaseName("IX_Article_Id5");

                    b.HasIndex(new[] { "TaxId" }, "IX_Tax_Id")
                        .HasDatabaseName("IX_Tax_Id1");

                    b.ToTable("TaxArticles");
                });

            modelBuilder.Entity("WpfAppv1.Models.Taxis", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("WpfAppv1.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("AllowAccesToStorage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("AllowAccessToTakenTables")
                        .HasColumnType("bit");

                    b.Property<bool?>("AllowAccestToReports")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("AllowBackoffice")
                        .HasColumnType("bit");

                    b.Property<bool?>("AllowCancelOrderItems")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("AllowDiscount")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("AllowEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowEndShift")
                        .HasColumnType("bit");

                    b.Property<bool?>("AllowMoveToTable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("AllowSettings")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowViewInvoices")
                        .HasColumnType("bit");

                    b.Property<bool?>("AllowVoidInvoice")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Group_Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OnlyMyRevenue")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GroupId" }, "IX_Group_Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WpfAppv1.Models.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("RuleTaxis", b =>
                {
                    b.HasOne("WpfAppv1.Models.Rule", null)
                        .WithMany()
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RuleTaxes_dbo.Rules_Rule_Id");

                    b.HasOne("WpfAppv1.Models.Taxis", null)
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RuleTaxes_dbo.Taxes_Tax_Id");
                });

            modelBuilder.Entity("WpfAppv1.Models.Article", b =>
                {
                    b.HasOne("WpfAppv1.Models.SubCategory", "SubCategory")
                        .WithMany("Articles")
                        .HasForeignKey("SubCategoryId");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("WpfAppv1.Models.ArticleGood", b =>
                {
                    b.HasOne("WpfAppv1.Models.Good", "Good")
                        .WithMany("ArticleGoods")
                        .HasForeignKey("GoodId");

                    b.Navigation("Good");
                });

            modelBuilder.Entity("WpfAppv1.Models.Category", b =>
                {
                    b.HasOne("WpfAppv1.Models.Storage", "Storage")
                        .WithMany("Categories")
                        .HasForeignKey("StorageId");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("WpfAppv1.Models.Einvoice", b =>
                {
                    b.HasOne("WpfAppv1.Models.Invoice", "Invoice")
                        .WithOne("Einvoice")
                        .HasForeignKey("WpfAppv1.Models.Einvoice", "InvoiceId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.EInvoices_dbo.Invoices_InvoiceId");

                    b.HasOne("WpfAppv1.Models.EinvoiceOrderFormFile", "OrderFormFile")
                        .WithMany("Einvoices")
                        .HasForeignKey("OrderFormFileId")
                        .HasConstraintName("FK_dbo.EInvoices_dbo.EInvoiceOrderFormFiles_OrderFormFileId");

                    b.HasOne("WpfAppv1.Models.EinvoiceParty", "Receiver")
                        .WithMany("EinvoiceReceivers")
                        .HasForeignKey("ReceiverId");

                    b.HasOne("WpfAppv1.Models.EinvoiceParty", "Sender")
                        .WithMany("EinvoiceSenders")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("FK_dbo.EInvoices_dbo.EInvoiceParties_SenderId");

                    b.Navigation("Invoice");

                    b.Navigation("OrderFormFile");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("WpfAppv1.Models.Good", b =>
                {
                    b.HasOne("WpfAppv1.Models.MeasureUnit", "Unit")
                        .WithMany("Goods")
                        .HasForeignKey("UnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("WpfAppv1.Models.InventoryDocument", b =>
                {
                    b.HasOne("WpfAppv1.Models.InventoryDocument", "SourceInvoice")
                        .WithMany("InverseSourceInvoice")
                        .HasForeignKey("SourceInvoiceId")
                        .HasConstraintName("FK_dbo.InventoryDocuments_dbo.InventoryDocuments_SourceInvoice_Id");

                    b.HasOne("WpfAppv1.Models.Storage", "Storage")
                        .WithMany("InventoryDocuments")
                        .HasForeignKey("StorageId");

                    b.HasOne("WpfAppv1.Models.Supplier", "Supplier")
                        .WithMany("InventoryDocuments")
                        .HasForeignKey("SupplierId");

                    b.Navigation("SourceInvoice");

                    b.Navigation("Storage");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WpfAppv1.Models.InventoryItemBasis", b =>
                {
                    b.HasOne("WpfAppv1.Models.Good", "Good")
                        .WithMany("InventoryItemBases")
                        .HasForeignKey("GoodId");

                    b.HasOne("WpfAppv1.Models.InventoryDocument", "InventoryDocument")
                        .WithMany("InventoryItemBases")
                        .HasForeignKey("InventoryDocumentId");

                    b.HasOne("WpfAppv1.Models.InvoiceItem", "InvoiceItem")
                        .WithMany("InventoryItemBases")
                        .HasForeignKey("InvoiceItemId");

                    b.HasOne("WpfAppv1.Models.Storage", "Storage")
                        .WithMany("InventoryItemBases")
                        .HasForeignKey("StorageId");

                    b.Navigation("Good");

                    b.Navigation("InventoryDocument");

                    b.Navigation("InvoiceItem");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("WpfAppv1.Models.Invoice", b =>
                {
                    b.HasOne("WpfAppv1.Models.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId");

                    b.HasOne("WpfAppv1.Models.User", "OrderByWaiter")
                        .WithMany("InvoiceOrderByWaiters")
                        .HasForeignKey("OrderByWaiterId")
                        .HasConstraintName("FK_dbo.Invoices_dbo.Users_OrderByWaiter_Id");

                    b.HasOne("WpfAppv1.Models.PaymentType", "PaymentType")
                        .WithMany("Invoices")
                        .HasForeignKey("PaymentTypeId");

                    b.HasOne("WpfAppv1.Models.Station", "Station")
                        .WithMany("Invoices")
                        .HasForeignKey("StationId");

                    b.HasOne("WpfAppv1.Models.Table", "Table")
                        .WithMany("Invoices")
                        .HasForeignKey("TableId");

                    b.HasOne("WpfAppv1.Models.User", "Waiter")
                        .WithMany("InvoiceWaiters")
                        .HasForeignKey("WaiterId");

                    b.Navigation("Customer");

                    b.Navigation("OrderByWaiter");

                    b.Navigation("PaymentType");

                    b.Navigation("Station");

                    b.Navigation("Table");

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("WpfAppv1.Models.InvoiceItem", b =>
                {
                    b.HasOne("WpfAppv1.Models.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("WpfAppv1.Models.InvoiceItemModifier", b =>
                {
                    b.HasOne("WpfAppv1.Models.InvoiceItem", "InvoiceItem")
                        .WithMany("InvoiceItemModifiers")
                        .HasForeignKey("InvoiceItemId")
                        .HasConstraintName("FK_dbo.InvoiceItemModifiers_dbo.InvoiceItems_InvoiceItem_Id");

                    b.Navigation("InvoiceItem");
                });

            modelBuilder.Entity("WpfAppv1.Models.Message", b =>
                {
                    b.HasOne("WpfAppv1.Models.User", "From")
                        .WithMany("MessageFroms")
                        .HasForeignKey("FromId")
                        .HasConstraintName("FK_dbo.Messages_dbo.Users_From_Id");

                    b.HasOne("WpfAppv1.Models.User", "To")
                        .WithMany("MessageTos")
                        .HasForeignKey("ToId")
                        .HasConstraintName("FK_dbo.Messages_dbo.Users_To_Id");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("WpfAppv1.Models.Novi", b =>
                {
                    b.HasOne("WpfAppv1.Models.SubCategory", "SubCategory")
                        .WithMany("Novis")
                        .HasForeignKey("SubCategoryId");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("WpfAppv1.Models.Person", b =>
                {
                    b.HasOne("WpfAppv1.Models.Customer", "Customer")
                        .WithMany("People")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WpfAppv1.Models.RuleItem", b =>
                {
                    b.HasOne("WpfAppv1.Models.Rule", "Rule")
                        .WithMany("RuleItems")
                        .HasForeignKey("RuleId")
                        .HasConstraintName("FK_dbo.RuleItems_dbo.Rules_Rule_Id");

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("WpfAppv1.Models.StationArticle", b =>
                {
                    b.HasOne("WpfAppv1.Models.Station", "Station")
                        .WithMany("StationArticles")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("WpfAppv1.Models.SubCategory", b =>
                {
                    b.HasOne("WpfAppv1.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId");

                    b.HasOne("WpfAppv1.Models.Storage", "Storage")
                        .WithMany("SubCategories")
                        .HasForeignKey("StorageId");

                    b.Navigation("Category");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("WpfAppv1.Models.Table", b =>
                {
                    b.HasOne("WpfAppv1.Models.Sector", "Sector")
                        .WithMany("Tables")
                        .HasForeignKey("SectorId");

                    b.HasOne("WpfAppv1.Models.User", "Waiter")
                        .WithMany("Tables")
                        .HasForeignKey("WaiterId");

                    b.Navigation("Sector");

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("WpfAppv1.Models.TaxArticle", b =>
                {
                    b.HasOne("WpfAppv1.Models.Taxis", "Tax")
                        .WithMany("TaxArticles")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("WpfAppv1.Models.User", b =>
                {
                    b.HasOne("WpfAppv1.Models.UserGroup", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("WpfAppv1.Models.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("WpfAppv1.Models.Customer", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("People");
                });

            modelBuilder.Entity("WpfAppv1.Models.EinvoiceOrderFormFile", b =>
                {
                    b.Navigation("Einvoices");
                });

            modelBuilder.Entity("WpfAppv1.Models.EinvoiceParty", b =>
                {
                    b.Navigation("EinvoiceReceivers");

                    b.Navigation("EinvoiceSenders");
                });

            modelBuilder.Entity("WpfAppv1.Models.Good", b =>
                {
                    b.Navigation("ArticleGoods");

                    b.Navigation("InventoryItemBases");
                });

            modelBuilder.Entity("WpfAppv1.Models.InventoryDocument", b =>
                {
                    b.Navigation("InventoryItemBases");

                    b.Navigation("InverseSourceInvoice");
                });

            modelBuilder.Entity("WpfAppv1.Models.Invoice", b =>
                {
                    b.Navigation("Einvoice");

                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("WpfAppv1.Models.InvoiceItem", b =>
                {
                    b.Navigation("InventoryItemBases");

                    b.Navigation("InvoiceItemModifiers");
                });

            modelBuilder.Entity("WpfAppv1.Models.MeasureUnit", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("WpfAppv1.Models.PaymentType", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("WpfAppv1.Models.Rule", b =>
                {
                    b.Navigation("RuleItems");
                });

            modelBuilder.Entity("WpfAppv1.Models.Sector", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("WpfAppv1.Models.Station", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("StationArticles");
                });

            modelBuilder.Entity("WpfAppv1.Models.Storage", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("InventoryDocuments");

                    b.Navigation("InventoryItemBases");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("WpfAppv1.Models.SubCategory", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Novis");
                });

            modelBuilder.Entity("WpfAppv1.Models.Supplier", b =>
                {
                    b.Navigation("InventoryDocuments");
                });

            modelBuilder.Entity("WpfAppv1.Models.Table", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("WpfAppv1.Models.Taxis", b =>
                {
                    b.Navigation("TaxArticles");
                });

            modelBuilder.Entity("WpfAppv1.Models.User", b =>
                {
                    b.Navigation("InvoiceOrderByWaiters");

                    b.Navigation("InvoiceWaiters");

                    b.Navigation("MessageFroms");

                    b.Navigation("MessageTos");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("WpfAppv1.Models.UserGroup", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
